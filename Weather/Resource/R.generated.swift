//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.image` struct is generated, and contains static references to 15 images.
  struct image {
    /// Image `icn_weather_broken_clouds`.
    static let icn_weather_broken_clouds = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_weather_broken_clouds")
    /// Image `icn_weather_clouds_day`.
    static let icn_weather_clouds_day = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_weather_clouds_day")
    /// Image `icn_weather_clouds_night`.
    static let icn_weather_clouds_night = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_weather_clouds_night")
    /// Image `icn_weather_fog`.
    static let icn_weather_fog = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_weather_fog")
    /// Image `icn_weather_hail`.
    static let icn_weather_hail = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_weather_hail")
    /// Image `icn_weather_moon`.
    static let icn_weather_moon = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_weather_moon")
    /// Image `icn_weather_rain`.
    static let icn_weather_rain = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_weather_rain")
    /// Image `icn_weather_scattered_clouds`.
    static let icn_weather_scattered_clouds = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_weather_scattered_clouds")
    /// Image `icn_weather_sleet`.
    static let icn_weather_sleet = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_weather_sleet")
    /// Image `icn_weather_snow`.
    static let icn_weather_snow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_weather_snow")
    /// Image `icn_weather_sun`.
    static let icn_weather_sun = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_weather_sun")
    /// Image `icn_weather_thunderstorm`.
    static let icn_weather_thunderstorm = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_weather_thunderstorm")
    /// Image `icn_weather_tornado`.
    static let icn_weather_tornado = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_weather_tornado")
    /// Image `icn_weather_water`.
    static let icn_weather_water = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_weather_water")
    /// Image `icn_weather_wind`.
    static let icn_weather_wind = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_weather_wind")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_weather_broken_clouds", bundle: ..., traitCollection: ...)`
    static func icn_weather_broken_clouds(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_weather_broken_clouds, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_weather_clouds_day", bundle: ..., traitCollection: ...)`
    static func icn_weather_clouds_day(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_weather_clouds_day, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_weather_clouds_night", bundle: ..., traitCollection: ...)`
    static func icn_weather_clouds_night(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_weather_clouds_night, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_weather_fog", bundle: ..., traitCollection: ...)`
    static func icn_weather_fog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_weather_fog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_weather_hail", bundle: ..., traitCollection: ...)`
    static func icn_weather_hail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_weather_hail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_weather_moon", bundle: ..., traitCollection: ...)`
    static func icn_weather_moon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_weather_moon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_weather_rain", bundle: ..., traitCollection: ...)`
    static func icn_weather_rain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_weather_rain, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_weather_scattered_clouds", bundle: ..., traitCollection: ...)`
    static func icn_weather_scattered_clouds(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_weather_scattered_clouds, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_weather_sleet", bundle: ..., traitCollection: ...)`
    static func icn_weather_sleet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_weather_sleet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_weather_snow", bundle: ..., traitCollection: ...)`
    static func icn_weather_snow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_weather_snow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_weather_sun", bundle: ..., traitCollection: ...)`
    static func icn_weather_sun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_weather_sun, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_weather_thunderstorm", bundle: ..., traitCollection: ...)`
    static func icn_weather_thunderstorm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_weather_thunderstorm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_weather_tornado", bundle: ..., traitCollection: ...)`
    static func icn_weather_tornado(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_weather_tornado, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_weather_water", bundle: ..., traitCollection: ...)`
    static func icn_weather_water(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_weather_water, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_weather_wind", bundle: ..., traitCollection: ...)`
    static func icn_weather_wind(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_weather_wind, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
